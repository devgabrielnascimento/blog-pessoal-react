var a = Object.defineProperty, e = Object.defineProperties;
var f = Object.getOwnPropertyDescriptors;
var r = Object.getOwnPropertySymbols;
var x = Object.prototype.hasOwnProperty, j = Object.prototype.propertyIsEnumerable;
var i = (o, m, t) => m in o ? a(o, m, { enumerable: !0, configurable: !0, writable: !0, value: t }) : o[m] = t, s = (o, m) => {
  for (var t in m || (m = {}))
    x.call(m, t) && i(o, t, m[t]);
  if (r)
    for (var t of r(m))
      j.call(m, t) && i(o, t, m[t]);
  return o;
}, p = (o, m) => e(o, f(m));
import { j as R } from "../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.mjs";
import { forwardRef as d } from "react";
import n from "../lib/SSRBase.mjs";
import w from "../defs/GitCommit.mjs";
const C = d((o, m) => /* @__PURE__ */ R.jsx(n, p(s({ ref: m }, o), { weights: w })));
C.displayName = "GitCommit";
export {
  C as GitCommit
};
